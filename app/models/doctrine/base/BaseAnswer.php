<?php

/**
 * BaseAnswer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $applicantID
 * @property integer $pageID
 * @property integer $publicStatus
 * @property integer $privateStatus
 * @property blob $attachment
 * @property timestamp $updatedAt
 * @property Applicant $Applicant
 * @property Page $Page
 * @property StatusType $PublicStatus
 * @property StatusType $PrivateStatus
 * @property Doctrine_Collection $Elements
 * @property Recommendation $Recommendation
 * @property Citizenship $Citizenship
 * @property Score $Score
 * 
 * @package    jazzee
 * @subpackage orm
 */
abstract class BaseAnswer extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('answer');
        $this->hasColumn('applicantID', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('pageID', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('publicStatus', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('privateStatus', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('attachment', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('updatedAt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Applicant', array(
             'local' => 'applicantID',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Page', array(
             'local' => 'pageID',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('StatusType as PublicStatus', array(
             'local' => 'publicStatus',
             'foreign' => 'id'));

        $this->hasOne('StatusType as PrivateStatus', array(
             'local' => 'privateStatus',
             'foreign' => 'id'));

        $this->hasMany('ElementAnswer as Elements', array(
             'local' => 'id',
             'foreign' => 'answerID'));

        $this->hasOne('Recommendation', array(
             'local' => 'id',
             'foreign' => 'answerID'));

        $this->hasOne('Citizenship', array(
             'local' => 'id',
             'foreign' => 'answerID'));

        $this->hasOne('Score', array(
             'local' => 'id',
             'foreign' => 'answerID'));
    }
}