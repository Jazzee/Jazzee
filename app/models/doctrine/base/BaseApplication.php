<?php

/**
 * BaseApplication
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $programID
 * @property integer $cycleID
 * @property string $contactName
 * @property string $contactEmail
 * @property string $contactPhone
 * @property string $welcome
 * @property timestamp $open
 * @property timestamp $close
 * @property timestamp $begin
 * @property decimal $feeForeign
 * @property decimal $feeDomestic
 * @property boolean $published
 * @property boolean $visible
 * @property string $admitLetter
 * @property string $denyLetter
 * @property integer $requireGRE
 * @property integer $requireGRESubject
 * @property integer $requireTOEFL
 * @property string $statusPageText
 * @property Program $Program
 * @property Cycle $Cycle
 * @property Doctrine_Collection $Pages
 * @property Doctrine_Collection $Applicants
 * 
 * @package    jazzee
 * @subpackage orm
 */
abstract class BaseApplication extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('application');
        $this->hasColumn('programID', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('cycleID', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('contactName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('contactEmail', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('contactPhone', 'string', 13, array(
             'type' => 'string',
             'length' => '13',
             ));
        $this->hasColumn('welcome', 'string', 4000, array(
             'type' => 'string',
             'length' => '4000',
             ));
        $this->hasColumn('open', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('close', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('begin', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('feeForeign', 'decimal', null, array(
             'type' => 'decimal',
             ));
        $this->hasColumn('feeDomestic', 'decimal', null, array(
             'type' => 'decimal',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('visible', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('admitLetter', 'string', 4000, array(
             'type' => 'string',
             'length' => '4000',
             ));
        $this->hasColumn('denyLetter', 'string', 4000, array(
             'type' => 'string',
             'length' => '4000',
             ));
        $this->hasColumn('requireGRE', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('requireGRESubject', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('requireTOEFL', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('statusPageText', 'string', 4000, array(
             'type' => 'string',
             'length' => '4000',
             ));


        $this->index('program_cycle', array(
             'fields' => 
             array(
              0 => 'programID',
              1 => 'cycleID',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Program', array(
             'local' => 'programID',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Cycle', array(
             'local' => 'cycleID',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ApplicationPage as Pages', array(
             'local' => 'id',
             'foreign' => 'applicationID'));

        $this->hasMany('Applicant as Applicants', array(
             'local' => 'id',
             'foreign' => 'applicationID'));
    }
}