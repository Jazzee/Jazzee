<?php

/**
 * BaseApplicant
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $applicationID
 * @property string $email
 * @property string $password
 * @property string $activate_token
 * @property timestamp $locked
 * @property string $firstName
 * @property string $middleName
 * @property string $lastName
 * @property string $suffix
 * @property timestamp $deadlineExtension
 * @property timestamp $lastLogin
 * @property string $lastLogin_ip
 * @property string $lastFailedLogin_ip
 * @property integer $failedLoginAttempts
 * @property timestamp $createdAt
 * @property timestamp $updatedAt
 * @property Application $Application
 * @property Doctrine_Collection $Attachments
 * @property Doctrine_Collection $Duplicates
 * @property Doctrine_Collection $Duplicate
 * @property Decision $Decision
 * @property Doctrine_Collection $Payment
 * @property Doctrine_Collection $Answers
 * 
 * @package    jazzee
 * @subpackage orm
 */
abstract class BaseApplicant extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('applicant');
        $this->hasColumn('applicationID', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => '60',
             ));
        $this->hasColumn('activate_token', 'string', 40, array(
             'type' => 'string',
             'unique' => true,
             'length' => '40',
             ));
        $this->hasColumn('locked', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('firstName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('middleName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('lastName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('suffix', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('deadlineExtension', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('lastLogin', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('lastLogin_ip', 'string', 15, array(
             'type' => 'string',
             'ip' => true,
             'length' => '15',
             ));
        $this->hasColumn('lastFailedLogin_ip', 'string', 15, array(
             'type' => 'string',
             'ip' => true,
             'length' => '15',
             ));
        $this->hasColumn('failedLoginAttempts', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('createdAt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('updatedAt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('application_email', array(
             'fields' => 
             array(
              0 => 'applicationID',
              1 => 'email',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Application', array(
             'local' => 'applicationID',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Attachment as Attachments', array(
             'local' => 'id',
             'foreign' => 'applicantID'));

        $this->hasMany('Duplicate as Duplicates', array(
             'local' => 'id',
             'foreign' => 'applicantID'));

        $this->hasMany('Duplicate', array(
             'local' => 'id',
             'foreign' => 'duplicateID'));

        $this->hasOne('Decision', array(
             'local' => 'id',
             'foreign' => 'applicantID'));

        $this->hasMany('Payment', array(
             'local' => 'id',
             'foreign' => 'applicantID'));

        $this->hasMany('Answer as Answers', array(
             'local' => 'id',
             'foreign' => 'applicantID'));
    }
}