<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $campusID
 * @property string $email
 * @property string $password
 * @property string $activateToken
 * @property string $firstName
 * @property string $lastName
 * @property timestamp $expires
 * @property timestamp $lastLogin
 * @property string $lastLogin_ip
 * @property string $lastFailedLogin_ip
 * @property integer $failedLoginAttempts
 * @property string $apiKey
 * @property blob $privateSSLKey
 * @property blob $publicSSLKey
 * @property blob $globalPrivateSSLKey
 * @property integer $defaultProgram
 * @property integer $defaultCycle
 * @property Program $Program
 * @property Cycle $Cycle
 * @property Doctrine_Collection $Roles
 * 
 * @package    jazzee
 * @subpackage orm
 */
abstract class BaseUser extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('campusID', 'string', 60, array(
             'type' => 'string',
             'unique' => true,
             'length' => '60',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'unique' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 60, array(
             'type' => 'string',
             'length' => '60',
             ));
        $this->hasColumn('activateToken', 'string', 40, array(
             'type' => 'string',
             'unique' => true,
             'length' => '40',
             ));
        $this->hasColumn('firstName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('lastName', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('expires', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('lastLogin', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('lastLogin_ip', 'string', 15, array(
             'type' => 'string',
             'ip' => true,
             'length' => '15',
             ));
        $this->hasColumn('lastFailedLogin_ip', 'string', 15, array(
             'type' => 'string',
             'ip' => true,
             'length' => '15',
             ));
        $this->hasColumn('failedLoginAttempts', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('apiKey', 'string', 40, array(
             'type' => 'string',
             'unique' => true,
             'length' => '40',
             ));
        $this->hasColumn('privateSSLKey', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('publicSSLKey', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('globalPrivateSSLKey', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('defaultProgram', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('defaultCycle', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Program', array(
             'local' => 'defaultProgram',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Cycle', array(
             'local' => 'defaultCycle',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('UserRole as Roles', array(
             'local' => 'id',
             'foreign' => 'userID'));
    }
}